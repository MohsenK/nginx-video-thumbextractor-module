h1(#nginx_video_thumbextractor_module). Nginx Video Thumb Extractor Module

Video Thumb Extractor is a module to extract an image from a video frame from a specific second resizing/cropping it to a given size.
The smallest generated image is ==16x16== pixels.

_This module is not distributed with the Nginx source. See "the installation instructions":installation._

Available on github at "nginx-video-thumbextractor-module":repository


h1(#status). Status

This module is considered production ready.


h1(#requirements). Requirements

This module depends from some libraries (headers and shared objects) which has to be installed before it:

* avformat > 53.5.0 (last tested version: 55.33.100) - commonly distributed with "FFmpeg":http://ffmpeg.org
* avcodec > 53.8.0 (last tested versions: 55.52.100) - commonly distributed with "FFmpeg":http://ffmpeg.org
* avutil > 52.18.100 (last tested versions: 52.66.100) - commonly distributed with "FFmpeg":http://ffmpeg.org
* avfilter >= 4.2.100 (last tested versions: 4.2.100) - commonly distributed with "FFmpeg":http://ffmpeg.org
* swscale >= 2.0.0 (last tested versions: 2.5.102) - commonly distributed with "FFmpeg":http://ffmpeg.org
* jpeg - "libjpeg":http://libjpeg.sourceforge.net


h1(#recommendation). Recommendation

When installing FFmpeg from source do not forget to enable shared libraries using _--enable-shared_

If you don't install FFmpeg from source you need to be sure that you have headers files for the libs avformat, avcodev, avutil, avfilter and swscale. On Ubuntu, for example you may install libavformat-dev, libavcodec-dev, libavutil-dev, libavfilter-dev and libswscale-dev packages*


h1(#supported_video_formats). Supported Video Formats

This module uses the libraries avcodec and avformat to read the video files. Any supported video format for these libraries will work.
Tested formats was _mp4_, _mov_ and _flv_.


h1(#installation). Installation

Install the above requirements and follow the steps bellow.

<pre>
    # clone the project
    git clone https://github.com/wandenberg/nginx-video-thumbextractor-module.git
    NGINX_VIDEO_THUMBEXTRACTOR_MODULE_PATH=$PWD/nginx-video-thumbextractor-module

    # get desired nginx version (tested with 1.0.x series)
    wget http://nginx.org/download/nginx-1.0.10.tar.gz

    # unpack, configure and build
    tar xzvf nginx-1.0.10.tar.gz
    cd nginx-1.0.10
    # configure nginx
    ./configure --add-module=$NGINX_VIDEO_THUMBEXTRACTOR_MODULE_PATH
    make

    # install and finish
    sudo make install

    # check
    sudo /usr/local/nginx/sbin/nginx -v
        nginx version: nginx/1.0.10

    # test configuration
    sudo /usr/local/nginx/sbin/nginx -c $NGINX_VIDEO_THUMBEXTRACTOR_MODULE_PATH/nginx.conf -t
        the configuration file $NGINX_VIDEO_THUMBEXTRACTOR_MODULE_PATH/nginx.conf syntax is ok
        configuration file $NGINX_VIDEO_THUMBEXTRACTOR_MODULE_PATH/nginx.conf test is successful

    # run
    sudo /usr/local/nginx/sbin/nginx -c $NGINX_VIDEO_THUMBEXTRACTOR_MODULE_PATH/nginx.conf
</pre>


h1(#basic-configuration). Basic Configuration

<pre>
    location ~ /thumbs(.*) {
        video_thumbextractor;
        video_thumbextractor_video_filename    $1;
        video_thumbextractor_video_second      $arg_second;
        video_thumbextractor_image_width       $arg_width;
        video_thumbextractor_image_height      $arg_height;
    }
</pre>


h1(#basic-usage). Basic Usage

Assuming that you have a file called _video.mp4_ on your root folder use a browser to test the following urls:

<pre>
  # get an image from second 10 with the original size
  http://localhost/thumbs/video.mp4?second=10

  # get an image from second 20 with a 50px of height and proportional width keeping video scale
  http://localhost/thumbs/video.mp4?second=10&height=50

  # get an image from second 30 with a 50px of height and 100px of width, the image will be cropped to keep video scale
  http://localhost/thumbs/video.mp4?second=20&height=50&width=100
</pre>


h1(#directives). Directives


h2(#video_thumbextractor). video_thumbextractor

*syntax:* _video_thumbextractor_

*context:* _location_

*release version:* _0.1.0_

Set Video Thumb Extractor as the request handler for the location.


h2(#video_thumbextractor_video_filename). video_thumbextractor_video_filename

*syntax:* _video_thumbextractor_video_filename filename_

*default:* _none_

*context:* _http_

*release version:* _0.1.0_

The video filename relative to root folder.
This directive is required.
Return a 404 if the video is not found.


h2(#video_thumbextractor_video_second). video_thumbextractor_video_second

*syntax:* _video_thumbextractor_video_second second_

*default:* _none_

*context:* _http_

*release version:* _0.1.0_

The time in seconds where the image should be extracted. The nearest key frame will be used to get the image.
This directive is required.
Return a 400 if the value is not specified.
Return a 404 if the second is not found (the video is shorter than the time specified).


h2(#video_thumbextractor_image_width). video_thumbextractor_image_width

*syntax:* _video_thumbextractor_image_width width_

*default:* _0_

*context:* _http_

*release version:* _0.1.0_

The width used to generate the image.
This directive is optional.
If only the width is specified the video size will be used as image size.


h2(#video_thumbextractor_image_height). video_thumbextractor_image_height

*syntax:* _video_thumbextractor_image_height height_

*default:* _0_

*context:* _http_

*release version:* _0.1.0_

The height used to generate the image.
This directive is optional.
If only the height is specified the width will be determined using video scale to keep the aspect.
If both, width and height, are specified the image will suffers a resize and an eventual crop to keep the aspect.


h2(#video_thumbextractor_only_keyframe). video_thumbextractor_only_keyframe

*syntax:* _video_thumbextractor_only_keyframe on|off_

*default:* _on_

*context:* _http_

*release version:* _0.3.0_

Set if only the keyframes should be used to create the image.
When set to off, the process will be a bit slower because the video will be decoded from the nearest keyframe up to the exact requested time.


h2(#video_thumbextractor_next_time). video_thumbextractor_next_time

*syntax:* _video_thumbextractor_next_time on|off_

*default:* _on_

*context:* _http_

*release version:* _0.3.0_

Set if will use the previous or the next keyframe considering the requested time when configured to use only the keyframes.


h1(#contributors). Contributors

"People":contributors


h1(#changelog). Changelog

h2(#0_4_0). v0.4.0

* fix to proper read videos with the moov atom is at the end of the file
* fix to use the nearest decoded frame, in the case of requested time is on the end of the video
* fix CFLAGS, LDFLAGS and ngx_feature_libs to find the parameters to compile using right MagickWand lib version
* using av_frame_alloc instead of avcodec_alloc_frame when available

h2(#0_3_0). v0.3.0

* fix frame allocation assert
* add configuration to choose between only keyframes or not, and if will use the previous or next frame relative to given time
* make possible read the video from an nginx cache file

h2(#0_2_0). v0.2.0

* fix use of deprecated functions

h2(#0_1_0). v0.1.0

* Initial release


[repository]https://github.com/wandenberg/nginx-video-thumbextractor-module
[installation]#instalation
[contributors]https://github.com/wandenberg/nginx-video-thumbextractor-module/contributors
