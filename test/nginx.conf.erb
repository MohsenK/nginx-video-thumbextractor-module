pid                     <%= pid_file %>;
error_log               <%= error_log %> debug;
# Development Mode
master_process  <%= master_process %>;
daemon          <%= daemon %>;
worker_processes      <%= nginx_workers %>;
worker_rlimit_core    500M;
working_directory     <%= File.join(nginx_tests_tmp_dir, "cores", config_id) %>;


events {
  worker_connections  1024;
  use                 <%= (RUBY_PLATFORM =~ /darwin/) ? 'kqueue' : 'epoll' %>;
}

http {
  default_type    application/octet-stream;

  types {
    video/mp4                             mp4;
    image/jpeg                            jpeg jpg;
  }

  access_log      <%= access_log %>;

  proxy_cache_path <%= File.expand_path(nginx_tests_tmp_dir) %>/cache levels=1:2 keys_zone=zone:10m inactive=10d max_size=100m;

  server {
    listen          <%= nginx_port %>;
    server_name     <%= nginx_host %>;

    location / {
      <%= "video_thumbextractor;" unless thumbextractor.nil? %>
      <%= write_directive("video_thumbextractor_video_filename", video_filename) %>
      <%= write_directive("video_thumbextractor_video_second", video_second) %>
      <%= write_directive("video_thumbextractor_image_width", image_width) %>
      <%= write_directive("video_thumbextractor_image_height", image_height) %>
      <%= write_directive("video_thumbextractor_only_keyframe", only_keyframe) %>
      <%= write_directive("video_thumbextractor_next_time", next_time) %>

      <%= write_directive("video_thumbextractor_jpeg_baseline", jpeg_baseline) %>
      <%= write_directive("video_thumbextractor_jpeg_progressive_mode", jpeg_progressive_mode) %>
      <%= write_directive("video_thumbextractor_jpeg_optimize", jpeg_optimize) %>
      <%= write_directive("video_thumbextractor_jpeg_smooth", jpeg_smooth) %>
      <%= write_directive("video_thumbextractor_jpeg_quality", jpeg_quality) %>
      <%= write_directive("video_thumbextractor_jpeg_dpi", jpeg_dpi) %>

      <%= write_directive("video_thumbextractor_tile_sample_interval", tile_sample_interval) %>
      <%= write_directive("video_thumbextractor_tile_cols", tile_cols) %>
      <%= write_directive("video_thumbextractor_tile_max_cols", tile_max_cols) %>
      <%= write_directive("video_thumbextractor_tile_rows", tile_rows) %>
      <%= write_directive("video_thumbextractor_tile_max_rows", tile_max_rows) %>
      <%= write_directive("video_thumbextractor_tile_margin", tile_margin) %>
      <%= write_directive("video_thumbextractor_tile_padding", tile_padding) %>
      <%= write_directive("video_thumbextractor_tile_color", tile_color) %>

      root <%= File.expand_path(File.dirname(__FILE__)) %>;
    }

    <%= extra_location %>
  }

  server {
    listen          <%= nginx_port %>;
    server_name     proxied_server;

    location / {
      <%= "video_thumbextractor;" unless thumbextractor.nil? %>
      <%= write_directive("video_thumbextractor_video_filename", video_filename) %>
      <%= write_directive("video_thumbextractor_video_second", video_second) %>

      proxy_set_header Host "static_files_server";

      proxy_pass http://localhost:<%= nginx_port %>;

      proxy_cache zone;
      proxy_cache_key "$uri";
      proxy_cache_valid 200 1m;
      proxy_cache_valid 404 30s;
    }
  }

  server {
    listen          <%= nginx_port %>;
    server_name     static_files_server;

    location / {
      root <%= File.expand_path(File.dirname(__FILE__)) %>;
    }
  }
}
